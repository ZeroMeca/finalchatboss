<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatBot Multi-Utilisateur</title>
    <style>
        /* Ajoutez les styles améliorés ici comme dans le précédent */
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="form-container" id="form-container">
            <h3>Entrez vos informations</h3>
            <input type="text" id="name" placeholder="Nom" oninput="this.value = this.value.replace(/\d/g, '')"><br><br>
            <input type="text" id="surname" placeholder="Prénom" oninput="this.value = this.value.replace(/\d/g, '')"><br><br>
            <input type="email" id="email" placeholder="Adresse e-mail"><br><br>
            <button onclick="validateForm()">Valider</button>
        </div>
        <div class="chat-box" id="chat-box">
            <div class="message bot">Comment puis-je vous aider ?</div>
        </div>
        <div class="input-container" id="input-container" style="display: none;">
            <input type="text" id="user-input" placeholder="Votre message..." onkeypress="handleKeyPress(event)">
            <button onclick="sendMessage()">Envoyer</button>
        </div>
    </div>

    <script>
        // Vérification de l'ID utilisateur dans localStorage
        let userID = localStorage.getItem('userID');
        if (!userID) {
            userID = generateUniqueID();
            localStorage.setItem('userID', userID);
        }

        // Initialisation du stockage des messages spécifiques à l'utilisateur
        if (!localStorage.getItem("chatMessages_" + userID)) {
            localStorage.setItem("chatMessages_" + userID, JSON.stringify([]));
        }

        function loadMessages() {
            let messages = JSON.parse(localStorage.getItem("chatMessages_" + userID));
            const chatBox = document.getElementById("chat-box");
            chatBox.innerHTML = '';  // Réinitialiser la boîte de chat
            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${message.role}`;
                messageDiv.innerHTML = message.content;
                chatBox.appendChild(messageDiv);
            });
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        // Générer un ID unique pour l'utilisateur
        function generateUniqueID() {
            return 'user_' + Math.random().toString(36).substr(2, 9);
        }

        function validateForm() {
            let name = document.getElementById("name").value.trim();
            let surname = document.getElementById("surname").value.trim();
            let email = document.getElementById("email").value.trim();
            
            if (!name || !surname || !email) {
                alert("Veuillez remplir tous les champs !");
                return;
            }
            
            if (!email.includes("@")) {
                alert("Veuillez entrer une adresse e-mail valide");
                return;
            }
            
            document.getElementById("form-container").style.display = "none";
            document.getElementById("input-container").style.display = "flex";
            loadMessages();  // Charger les messages stockés
        }

        async function sendMessage() {
            let input = document.getElementById("user-input");
            let message = input.value.trim();
            if (!message) return;

            let chatBox = document.getElementById("chat-box");
            let now = new Date();
            let hours = now.getHours().toString().padStart(2, '0');
            let minutes = now.getMinutes().toString().padStart(2, '0');
            let timestamp = `${hours}:${minutes}`;

            // Afficher le message de l'utilisateur
            chatBox.innerHTML += `<div class='message user'>${message}</div><span class='timestamp'>${timestamp}</span>`;

            // Stocker le message
            storeMessage('user', message);

            input.value = "";

            let botResponse = await fetchAIResponse(message);
            chatBox.innerHTML += `<div class='message bot'>${botResponse}</div><span class='timestamp'>${timestamp}</span>`;

            // Stocker la réponse du bot
            storeMessage('bot', botResponse);

            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function storeMessage(role, content) {
            let messages = JSON.parse(localStorage.getItem("chatMessages_" + userID));
            messages.push({ role: role, content: content });
            localStorage.setItem("chatMessages_" + userID, JSON.stringify(messages));
        }

        function handleKeyPress(event) {
            if (event.key === "Enter") {
                sendMessage();
            }
        }

        async function fetchAIResponse(message) {
            try {
                const response = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer VOTRE_CLE_API"
                    },
                    body: JSON.stringify({
                        model: "gpt-4",
                        messages: [{role: "user", content: message}]
                    })
                });
                const data = await response.json();
                return data.choices ? data.choices[0].message.content : "Je n'ai pas compris votre question.";
            } catch (error) {
                console.error("Erreur lors de la requête API:", error);
                return "Une erreur s'est produite. Veuillez réessayer plus tard.";
            }
        }
    </script>
</body>
</html>
